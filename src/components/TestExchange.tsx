import React, { useMemo } from 'react';
import { BrowserProvider, ethers, JsonRpcSigner } from 'ethers';
import axios from 'axios';
import {
  Config,
  useAccount,
  useConnectorClient,
  useSendTransaction,
} from 'wagmi';
import config from '@/config/configuration';
import { sign } from 'crypto';
import { Account, Chain, Client, Transport } from 'viem';
import { getConnectorClient } from '@wagmi/core';
import { wagmiConfig } from '@/config/wagmi';

const integratorId: string =
  'test-project-4ba94915-f432-4d42-89df-53c6de4dd93e';

// Define chain and token addresses
const fromChainId = '137'; // Polygon
const toChainId = '137'; // Polygon
const fromToken = '0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359';
const toToken = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee'; // USDC

const url = config.NETWORK_RPC_ADDRESS;
const provider = new ethers.JsonRpcProvider('https://base.llamarpc.com');

// Define the amount to be sent
const amount = '10000000';

export function clientToSigner(client: Client<Transport, Chain, Account>) {
  const { account, chain, transport } = client;
  const network = {
    chainId: chain.id,
    name: chain.name,
    ensAddress: chain.contracts?.ensRegistry?.address,
  };
  const provider = new BrowserProvider(transport, network);
  const signer = new JsonRpcSigner(provider, account.address);
  return signer;
}

export async function getEthersSigner({ chainId }: { chainId?: number } = {}) {
  const client = await getConnectorClient(wagmiConfig, { chainId });
  return clientToSigner(client);
}

export const getRoute = async (params: any) => {
  try {
    const result = await axios.post(
      'https://apiplus.squidrouter.com/v2/route',
      params,
      {
        headers: {
          'x-integrator-id': integratorId,
          'Content-Type': 'application/json',
        },
      },
    );
    const requestId = result.headers['x-request-id'];
    return { data: result.data, requestId: requestId };
  } catch (error: any) {
    if (error.response) {
      console.error('API error:', error.response.data);
    }
    console.error('Error with parameters:', params);
    throw error;
  }
};

const getStatus = async (params: any) => {
  try {
    const result = await axios.get(
      'https://apiplus.squidrouter.com/v2/status',
      {
        params: {
          transactionId: params.transactionId,
          requestId: params.requestId,
          fromChainId: params.fromChainId,
          toChainId: params.toChainId,
        },
        headers: {
          'x-integrator-id': integratorId,
        },
      },
    );
    return result.data;
  } catch (error) {
    console.log('Error');
  }
};

// Function to periodically check the transaction status until it completes
const updateTransactionStatus = async (txHash: string, requestId: string) => {
  const getStatusParams = {
    transactionId: txHash,
    requestId: requestId,
    fromChainId: fromChainId,
    toChainId: toChainId,
  };

  let status;
  const completedStatuses = [
    'success',
    'partial_success',
    'needs_gas',
    'not_found',
  ];
  const maxRetries = 10; // Maximum number of retries for status check
  let retryCount = 0;

  do {
    try {
      status = await getStatus(getStatusParams);
      console.log(`Route status: ${status.squidTransactionStatus}`);
    } catch (error: any) {
      if (error.response && error.response.status === 404) {
        retryCount++;
        if (retryCount >= maxRetries) {
          console.error('Max retries reached. Transaction not found.');
          break;
        }
        console.log('Transaction not found. Retrying...');
        await new Promise(resolve => setTimeout(resolve, 5000)); // Wait for 5 seconds before retrying
        continue;
      } else {
        throw error; // Rethrow other errors
      }
    }

    if (!completedStatuses.includes(status.squidTransactionStatus)) {
      await new Promise(resolve => setTimeout(resolve, 5000)); // Wait for 5 seconds before checking the status again
    }
  } while (!completedStatuses.includes(status.squidTransactionStatus));
};

const TestExchange = () => {
  // Function to approve the transactionRequest.target to spend fromAmount of fromToken
  const approveSpending = async (
    transactionRequestTarget: string,
    fromToken: string,
    fromAmount: string,
  ) => {
    const erc20Abi = [
      'function approve(address spender, uint256 amount) public returns (bool)',
    ];

    let provider = new ethers.BrowserProvider(window.ethereum);

    // It also provides an opportunity to request access to write
    // operations, which will be performed by the private key
    // that MetaMask manages for the user.
    let signer = await provider.getSigner();

    const tokenContract = new ethers.Contract(fromToken, erc20Abi, signer);

    try {
      const tx = await tokenContract.approve(
        transactionRequestTarget,
        fromAmount,
      );
      await tx.wait();
      console.log(
        `Approved ${fromAmount} tokens for ${transactionRequestTarget}`,
      );
    } catch (error) {
      console.error('Approval failed:', error);
      throw error;
    }
  };

  const executeSwap = async () => {
    console.log('SDs');
    // console.log(window.ethereum);
    const signer = await getEthersSigner();
    console.log(signer, 'testProvider');

    // let provider = new ethers.BrowserProvider(window.ethereum);

    // It also provides an opportunity to request access to write
    // operations, which will be performed by the private key
    // that MetaMask manages for the user.

    // const signer = await provider.getSigner();
    console.log(signer);

    // const tx = await signer.sendTransaction({
    //   from: '0x4ce6B0F604E1036AFFD0826764b51Fb72310964c',
    //   to: '0x0000000000000000000000000000000000000000',
    //   data: '0x095ea7b30000000000000000000000008d855d10721d19ad8c9f703745e17be5c38b857d0000000000000000000000000000000000000000000000008ac7230489e80000',
    // });
    // console.log('Sign Transaction Hash:', tx.hash);

    // const sendTx = await signer.sendTransaction({
    //   from: '0x4ce6B0F604E1036AFFD0826764b51Fb72310964c',
    //   to: '0x8D855D10721d19AD8c9f703745e17be5C38B857D',
    //   value: '0x91b77e5e5d9a0000',
    //   // gas: "0x04dbb1",
    //   data: '',
    //   // gasPrice: '0x04dbb1',
    // });
    // console.log(' Send Transaction Hash:', sendTx.hash);

    // try {

    const params = {
      fromAddress: signer.address,
      fromChain: fromChainId,
      fromToken: fromToken,
      fromAmount: amount,
      toChain: toChainId,
      toToken: toToken,
      toAddress: '0x2E555fCf3A9a91C2971C6205D3f8F42Cbbfc9d5A',
    };

    console.log('Parameters:', params);

    //   // Get the swap route using Squid API
    const routeResult = await getRoute(params);
    const route = routeResult.data.route;
    const requestId = routeResult.requestId;
    console.log('Route Result', routeResult);
    console.log('Calculated route:', route);
    console.log('requestId:', requestId);

    const transactionRequest = route.transactionRequest;

    // //   // If not using native token, approve spending
    await approveSpending(transactionRequest.target, fromToken, amount);

    // console.log('===', transactionRequest);
    const tx = await signer.sendTransaction({
      to: transactionRequest.target,
      data: transactionRequest.data,
      value: transactionRequest.value,
      gasPrice: (await provider.getFeeData()).gasPrice,
      gasLimit: transactionRequest.gasLimit,
    });
    // console.log('Transaction Hash:', tx.hash);
    // const txReceipt = await tx.wait();
    // console.log(`Finished! Check Axelarscan for details: ${txReceipt}`);

    // if (txReceipt) {
    //   console.log(txReceipt);
    //   await updateTransactionStatus(txReceipt?.hash, requestId);
    // } //   // // Update transaction status

    //   return 'some data';
    // } catch (error) {
    //   console.error('Error in executeSwap:', error);
    //   throw error;
    // }
  };

  return (
    <div>
      TestExchange
      <button onClick={executeSwap}> Click</button>
    </div>
  );
};

export default TestExchange;
